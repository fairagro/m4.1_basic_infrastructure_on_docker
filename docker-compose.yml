services:
  nextcloud:
    image: nextcloud:28.0.2-fpm-alpine
    container_name: nextcloud_app
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=nextcloud
      - PGSSLCERT=/tmp/postgresql.crt
      - REDIS_HOST=redis
      - SMTP_HOST=www623.your-server.de
      - SMTP_PORT=587
      - SMTP_SECURE=starttls
      - SMTP_AUTHTYPE=LOGIN
      - MAIL_FROM_ADDRESS=nextcloud
      - MAIL_DOMAIN=fairagro.net
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.fairagro.net
      # these variables are set via secrets:
      # (TODO:we could alternatively rely on docker secrets, but it's unclear if this
      # is also supported by the postgres database container/
      # refer to: https://docs.docker.com/compose/how-tos/use-secrets/,
      # We would need to define all variables ending in _FILE instead)
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - NEXTCLOUD_ADMIN_USER
      - NEXTCLOUD_ADMIN_PASSWORD
      - SMTP_NAME
      - SMTP_PASSWORD
      - REDIS_HOST_PASSWORD
    user: "82:1000"
    read_only: false
    volumes:
      - nextcloud_data:/var/www/html
      - ./nextcloud/redis-session.ini:/usr/local/etc/php/conf.d/redis-session.ini
    expose:
      - "9000"  # FPM
    networks:
      - nextcloud_net
      - proxy_net
    depends_on:
      - db
      - redis
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

  # This is a root container!
  # Probably we do not need all those env vars...
  nextcloud-cron:
    image: nextcloud:28.0.2-fpm-alpine
    container_name: nextcloud_cron
    restart: unless-stopped
    entrypoint: /cron.sh
    depends_on:
      - nextcloud
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=nextcloud
      - PGSSLCERT=/tmp/postgresql.crt
      - REDIS_HOST=redis
      - SMTP_HOST=www623.your-server.de
      - SMTP_PORT=587
      - SMTP_SECURE=starttls
      - SMTP_AUTHTYPE=LOGIN
      - MAIL_FROM_ADDRESS=nextcloud
      - MAIL_DOMAIN=fairagro.net
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.fairagro.net
      # these variables are set via secrets:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - NEXTCLOUD_ADMIN_USER
      - NEXTCLOUD_ADMIN_PASSWORD
      - SMTP_NAME
      - SMTP_PASSWORD
      - REDIS_HOST_PASSWORD
    read_only: false
    volumes:
      - nextcloud_data:/var/www/html
      - ./nextcloud/redis-session.ini:/usr/local/etc/php/conf.d/redis-session.ini
    networks:
      - nextcloud_net
      - proxy_net
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true

  db:
    image: postgres:15
    container_name: nextcloud_db
    command: postgres -c listen_addresses='db'
    restart: always
    environment:
      - POSTGRES_DB=nextcloud
      # folgende variablen werden via secret gesetzt:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
    read_only: true
    volumes:
      - db_data:/var/lib/postgresql/data:rw
    networks:
      - nextcloud_net
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /run

  redis:
    image: redis:alpine
    container_name: nextcloud_redis
    restart: always
    command: >
      redis-server
      --bind redis
      --requirepass $REDIS_HOST_PASSWORD
    environment:
      # folgende variablen werden via secret gesetzt:
      - REDIS_HOST_PASSWORD
    networks:
      - nextcloud_net
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run
      - /data

  nginx-proxy:
    image: nginxinc/nginx-unprivileged:1.25-alpine
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    read_only: true
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_certs:/etc/nginx/certs
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - nextcloud_data:/var/www/html
    depends_on:
      - certbot
    networks:
      - proxy_net
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "101:1000"  # nginx user in Alpine image
    tmpfs:
      - /var/cache/nginx:uid=101,gid=1000,mode=700
      - /tmp
      - /run:uid=101,gid=1000,mode=700

  certbot_init:
    image: alpine
    container_name: nginx_certbot_init
    command: sh -c "chown -R 101:1000 /etc/letsencrypt /var/log/letsencrypt /var/lib/letsencrypt"
    volumes:
      - nginx_certs:/etc/letsencrypt
      - certbot_logs:/var/log/letsencrypt
      - certbot_work:/var/lib/letsencrypt
    restart: "no"

  certbot:
    image: certbot/dns-cloudflare
    container_name: nginx_certbot
    restart: "no"
    user: "101:1000"  # Ein normaler User ohne Rootrechte
    depends_on:
      - certbot_init
    read_only: true
    volumes:
      - nginx_certs:/etc/letsencrypt:rw
      - ./certbot/run-certbot.sh:/run-certbot.sh
      - certbot_logs:/var/log/letsencrypt:rw
      - certbot_work:/var/lib/letsencrypt:rw
    entrypoint: /run-certbot.sh
    environment:
      - CERTBOT_DOMAINS=nextcloud.fairagro.net
      # folgende variablen werden via secret gesetzt:
      - CERTBOT_EMAIL
      - CLOUDFLARE_API_TOKEN
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    tmpfs:
      - /tmp
      
  certbot-renew:
    image: certbot/dns-cloudflare
    container_name: nginx_certbot_renew
    restart: unless-stopped
    user: "101:1000"
    depends_on:
      - certbot
    read_only: true
    volumes:
      - nginx_certs:/etc/letsencrypt:rw
      - ./certbot/certbot-renew.sh:/certbot-renew.sh
      - certbot_logs:/var/log/letsencrypt:rw
      - certbot_work:/var/lib/letsencrypt:rw
    entrypoint: /certbot-renew.sh
    environment:
      # folgende variablen werden via secret gesetzt:
      - CLOUDFLARE_API_TOKEN
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    tmpfs:
      - /tmp


volumes:
  nextcloud_data:
  db_data:
  nginx_certs:
  nginx_html:
  certbot_logs:
  certbot_work:

networks:
  nextcloud_net:
    internal: true   # Kein direkter Zugang von au√üen
  proxy_net:
    internal: false  # Externe Zugriffe erlaubt (z.B. nginx)

